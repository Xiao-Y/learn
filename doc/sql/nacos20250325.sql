/*
 Navicat Premium Dump SQL

 Source Server         : mysql-alone
 Source Server Type    : MySQL
 Source Server Version : 80017 (8.0.17)
 Source Host           : localhost:3306
 Source Schema         : nacos

 Target Server Type    : MySQL
 Target Server Version : 80017 (8.0.17)
 File Encoding         : 65001

 Date: 25/03/2025 20:26:39
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'group_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'configuration description',
  `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'configuration usage',
  `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '配置生效的描述',
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT '配置的类型',
  `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT '配置的模式',
  `encrypted_data_key` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT '密钥',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfo_datagrouptenant`(`data_id` ASC, `group_id` ASC, `tenant_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 437 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_info
-- ----------------------------
INSERT INTO `config_info` VALUES (342, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n# 如果路由方式是serviceId的方式，那么ribbon的生效，如果是url的方式，则zuul.host开头的生效\nribbon:\n  ReadTimeout: 15000\n  ConnectTimeout: 10000\n\n# 显示 sql 的查询参数\nlogging:\n  level:\n    org:\n      hibernate:\n        type:\n          descriptor:\n            sql:\n              BasicBinder: TRACE\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n', '2db4f098505d267566d342aedb6859c1', '2021-03-12 07:25:26', '2025-03-25 17:07:14', 'nacos', '172.29.0.1', 'learn-shop-admin-user', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (343, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n  activiti:\n    check-process-definitions: false #校验流程文件，默认校验resources下的processes文件夹里的流程文件\n    mail-server-use-ssl: true\n    database-schema-update: false #首次启动时，需要设置为true，自动建表\n    async-executor-activate: false\n  thymeleaf:\n    mode: HTML5\n    cache: false\n    prefix: classpath:/templates/\n  freemarker:\n    cache: false\n    template-loader-path: classpath:/templates/\n\n\ncustom:\n  menu:\n    write-cache: true #菜单写入缓存中\n  common:\n    base-file-path: D:/uploadfile # base 路径\n    image-mapping: /displayImag # 映射处理的路径，当 url 中有 /displayImag 时，资源映射到 D:/temp-rainy/\n    markdown-img-path: /markdown # 图片保存的路径\n    user-icon-img-path: /usericon # 图片保存的路径\n    start-init-data: false #启动时，是否初始数据（首次启动时需要设置为true,默认为true）\n  mail:\n    from: NULL #系统对外发送邮件的地址\n    host: smtp.exmail.qq.com\n    port: 465\n    username: XXXXXX\n    password: XXXXXX\n  thread-pool:\n    core-pool-size: 8 # 线程池长期维持的线程数 默认 8\n    maximum-pool-size: 10 # 线程数的上限 默认 10\n    capacity: 512 # 任务的排队队列 默认 512\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  mapper-locations: classpath*:mapper/**/*Mapper.xml', 'a3841a5e5cdac7454e2d8af1e0430216', '2021-03-12 07:25:26', '2025-03-25 17:07:30', 'nacos', '172.29.0.1', 'learn-shop-admin-system', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (344, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）\n\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'ea5aabc3b5e3adf8e60fef16d7639af9', '2021-03-12 07:25:26', '2025-03-25 17:07:46', 'nacos', '172.29.0.1', 'learn-shop-core-order', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (345, 'learn-shop-core-product.yml', 'DEFAULT_GROUP', 'feign:\n  hystrix:\n    enabled: true\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000\n\n###### 支付宝配置 #####\nalipay:\n  scan:\n    appId: 2016082500310007\n    privateKey: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDNNgoEcF2hTNWhaeOIMgSNf2OAyrOzmZo+/gKZelXaHsVkHgHg2PwJXXNlOkp5blERVxyxiwdzsRvdnC3Ul6UVbZHm+o2EPowYwZQ5CMiKnPBZ1n0fBi9v/XFmDXurz8OE+63rtfpl4ibKlTaJPh7gMX/krJ8JnSRzHxtVxhl6PI2S5wshWilWykOVmWKkayyu+0ulsOXw4GQHxxGiH0Q5k3g6m4MsDLRS+Pj7o9k0c0dCAr+riJcgxpBKZozAsezY6yhX8/eT0Q6oSFXblMuHg/GNwPAshR7RSWYp4XJWQSfN7Qvbz2d5giqpO/FXRiGz2yKPFIEaf01eGzzGXbxrAgMBAAECggEAXHsREqUNHSdCU4cj+noIITiawC0ZxUPhBqh0xXQjgrRBYvg/AnTnSNUrryAQ9h6oPDdVABJW3mWf2ESNRvS8eiayDTU3V7TUcEe1I+r4bbeCfgoywyuHb2H5m/NRm8F7LNA7tjGB0i6UKtIKDNnJEmJcb9L3rV57UcJgEEzBqJsYVqJGAH+51tELa+Nvoc/hjdAmdc/JQBPjKRSUMRbre7Hi2upA6eQf40JqZ7MewKumwAowkUPJAt1IXT9lZfinbOE6nGQLS4rfSQDtLpv34Ogkh1Q3p65wtIp8fNtj0BGWqKtS6ioK94HlAfapFmVIePpPzWxA3u3nNzU+7e7HkQKBgQD2TeBnYtvBA/3PJsJVKJRKd77ArSpBpIdvMmt5uNCdglVtxzBpXCQCTVbHhwD1k5geHqXxv941+JgZowALG+Ght/41ISNfBR23Wp5jQsF9rh/O3Zf6TP5YuCZkaaagKTDBvE25sQMvacfU2t4pwYFVFDgCl0QTxrzNAnXnn92IOQKBgQDVSgxCaqvFb4Y8YTCPL07XWWGNLm/RugtjIUWII5ivhE7O2oT+IFYIDdkQAYrQqk8dAYznncZSXUBMsp5UUTsRNN93sbv1/W3CJG4LLrtOxxfvIygGQ73K/KcwUcLfLqfKcnDFPC966062eCbaIiW2vES35/ga7ASrUp5n7EzBwwKBgFC+9RtPqHVdhp6buUfLttm26f0mh9zfQFsu71cHRLTuXm1PyMoxn8h1bEabNrBLg6oUKBjZ6tJMvihhbIk3yb+HnznxtDPZbIWImrY101MNe3YI5WL0TMnvDP8MN8j31/kbb2u54S5xAkcAvaZ4vpqSt036IyJMm+alsNuPaEPZAoGBAJPpwzC4GyFToyryV6Oksi9j2+P1xTQTqlv3semkjfmCbsjDACHgOOli+RpBh4wH38+EyLvDTcrGwpWt9WER6D2ZhjPSvT/tnZVagDofEWSja3S608Hsbo17w1IeEV+HUnNyA8S0ZVUAJFkkYAU8Ux0z2RAUvZml/eL168a0N9LTAoGBANpzvszR7wmQlDSDJaQgIU3jtSyxekf36uLpObdILnoDIQa9S17obIKFULqF/e16h/VmEZPJEBlWVGXzeTyXGOgF4VvqUJhKvGk3nPald48HK/OyKaH1VTdwKpk9VpNE3tHvnKAQVyOCEs5wvTYGZV8t98aS5pAk+0oPjLugCzJn\n    aliPayPublicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7zmfFuPvlQm5+/xv0uNi46yAk3V/lwABSunI0NB5GFukfVIe1OoQw4Puv4NRfHO3gqCKcN0g+gt2vTaAm8JJN9dy4HKNlB6SuOGGPtblQdsmvrY64moOwY2tZL7LAm4eiRfo4eWSczA41pjS7iCtzxyUkJ9H/1/5mmvsrCQ9jhYnQ/Si7iuTniLzIejFUnM1vWQXHtT4qmQjjotXF+OSvoohBxW2s0DY6rWl62qoEB0xJkg4KGofjuNhEuAlFDgWDOfYKNXCXKeXVuEvzamKGsQmFFxSNQvu6AGn3qvPogsPdWxesLmh48Ayei9BRL8d4RNcjOzXOMLv59YKX1LErQIDAQAB\n    notifyUrl: http://1p7v403130.iask.in/notify\n    returnUrl: http://1p7v403130.iask.in/return\n    gatewayUrl: https://openapi.alipaydev.com/gateway.do # 沙箱\n#    gatewayUrl: https://openapi.alipay.com/gateway.do # 生产\n#    charset: UTF-8 #编码格式,默认：UTF-8\n#    signType: RSA2 #商户生成签名字符串所使用的签名算法类型,默认：RSA2\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'f1dad8c59ed450feb498797a6dac6027', '2021-03-12 07:25:26', '2025-03-25 17:08:02', 'nacos', '172.29.0.1', 'learn-shop-core-product', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (346, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', 'spring:\n  jpa: #JPA配置\n    generate-ddl: false\n    show-sql: true\n    hibernate:\n      ddl-auto: none\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\nauth:\n  token:\n    alias: jwt\n    jwtFileName: jwt.jks\n    jwtPassword: 123456789\n  white-list:\n    - \"/rsa/publicKey\" # 获取公钥\n# 日志\nlogging:\n  level:\n    org:\n      springframework:\n        security: DEBUG\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'fd821963aba0caa1fe6c7d4fdafa4cf1', '2021-03-12 07:25:26', '2025-03-25 16:57:57', 'nacos', '172.29.0.1', 'learn-shop-public-auth', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (348, 'learn-shop-core-search.yml', 'DEFAULT_GROUP', 'spring:\n  elasticsearch:\n    rest:\n      connection-timeout: 10s\n      uris:\n        - http://127.0.0.1:9200\nfeign:\n  hystrix:\n    enabled: true\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', '0deb3968ed79bccc647c18628f549758', '2021-03-12 07:25:26', '2025-03-25 17:08:19', 'nacos', '172.29.0.1', 'learn-shop-core-search', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (358, 'sys-config-db.yml', 'DEFAULT_GROUP', 'db.service.ipAddress: 127.0.0.1\n####################################################################################################\n############################################ 主从分离 sharding-jdbc hikari 数据源配置 ################\n####################################################################################################\nspring:\n  shardingsphere:\n    datasource:\n      names: master,slave1,slave2\n      master: # 主数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:3306/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: root\n        password: root\n      slave1: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:3306/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: root\n        password: root\n      slave2: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:3306/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: root\n        password: root\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: dataSource\n      master-data-source-name: master\n      slave-data-source-names: slave1,slave2\n    props:\n      sql: true # 显示SQL', 'fbd8b65f9f51f820183a0739b257e1c4', '2021-08-24 11:08:25', '2025-03-25 17:08:32', 'nacos', '172.29.0.1', 'common', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (378, 'sys-config-notice.yml', 'DEFAULT_GROUP', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n        durable: true\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', '80c66926699d6a826df9aaab1dd32aa0', '2021-12-22 12:44:20', '2025-03-25 17:08:43', 'nacos', '172.29.0.1', 'common', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (403, 'learn-shop-core-promotion.yml', 'DEFAULT_GROUP', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'fccdb730be16b02408a7aae563dbdc36', '2022-03-27 07:58:22', '2025-03-25 17:09:00', 'nacos', '172.29.0.1', 'learn-shop-core-promotion', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (405, 'learn-shop-app.yml', 'DEFAULT_GROUP', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', 'd87d953c8ebfd5aac7a17b9788d22866', '2022-03-27 08:00:20', '2025-03-25 17:09:22', 'nacos', '172.29.0.1', 'learn-shop-app', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (408, 'cloud-config.yml', 'DEFAULT_GROUP', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n  client:\n    ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n  gateway: \n      static: \n        locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n####################################################################################################\n################################################## 日志 配置 #################################\n####################################################################################################\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称\n\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"', 'a8cd8d58b28ba5fcc25428f95386251d', '2022-08-10 01:45:34', '2025-03-25 17:03:05', 'nacos', '172.29.0.1', 'common', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (434, 'seata-server.properties', 'DEFAULT_GROUP', 'store.mode=db\n#-----db-----\nstore.db.datasource=druid\nstore.db.dbType=mysql\n# 需要根据mysql的版本调整driverClassName\n# mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver\n# mysql8以下版本的driver：com.mysql.jdbc.Driver\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://mysql-alone:3306/seata-server?useUnicode=true&characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false\nstore.db.user=root\nstore.db.password=root\n# 数据库初始连接数\nstore.db.minConn=1\n# 数据库最大连接数\nstore.db.maxConn=20\n# 获取连接时最大等待时间 默认5000，单位毫秒\nstore.db.maxWait=5000\n# 全局事务表名 默认global_table\nstore.db.globalTable=global_table\n# 分支事务表名 默认branch_table\nstore.db.branchTable=branch_table\n# 全局锁表名 默认lock_table\nstore.db.lockTable=lock_table\n# 查询全局事务一次的最大条数 默认100\nstore.db.queryLimit=100\n\n\n# undo保留天数 默认7天,log_status=1（附录3）和未正常清理的undo\nserver.undo.logSaveDays=7\n# undo清理线程间隔时间 默认86400000，单位毫秒\nserver.undo.logDeletePeriod=86400000\n# 二阶段提交重试超时时长 单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试\n# 公式: timeout>=now-globalTransactionBeginTime,true表示超时则不再重试\n# 注: 达到超时时间后将不会做任何重试,有数据不一致风险,除非业务自行可校准数据,否者慎用\nserver.maxCommitRetryTimeout=-1\n# 二阶段回滚重试超时时长\nserver.maxRollbackRetryTimeout=-1\n# 二阶段提交未完成状态全局事务重试提交线程间隔时间 默认1000，单位毫秒\nserver.recovery.committingRetryPeriod=1000\n# 二阶段异步提交状态重试提交线程间隔时间 默认1000，单位毫秒\nserver.recovery.asynCommittingRetryPeriod=1000\n# 二阶段回滚状态重试回滚线程间隔时间  默认1000，单位毫秒\nserver.recovery.rollbackingRetryPeriod=1000\n# 超时状态检测重试线程间隔时间 默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器\nserver.recovery.timeoutRetryPeriod=1000', '5fe420ac6f7f61e47af572f850df0ca2', '2024-12-18 18:48:59', '2025-03-25 17:09:43', 'nacos', '172.29.0.1', 'common', 'dev', '	\nseata 分布式事务', '', '', 'properties', '', '');
INSERT INTO `config_info` VALUES (435, 'sys-config-mq.yml', 'DEFAULT_GROUP', 'mq:\n  service:\n    ipAddress: 127.0.0.1\n\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\nconfig:\n  mq:\n    # mq的类型\n    type: rabbit\n    # mq服务器地址\n    host: ${mq.service.ipAddress}\n    # mq用户名和密码\n    username: admin\n    password: admin123\n    # mq服务器端口\n    port: 5672\n    # 虚拟主机\n    virtual-host: /learn-default\n\n    # 控制输入MQ的日志级别\n    #      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n    #      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n    #      WARN： 输出警告信息；表明会出现潜在错误的情形。\n    #      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n    #      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n    #      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n    #      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n    logCollect:\n      log-level: OFF level\n\n    # canal 同步 数据库到 es 的队列\n    queue:\n      syncEs: canal-queue', 'a4da4c84b64cf3013629fdb8d622916b', '2025-03-25 17:18:36', '2025-03-25 17:19:43', 'nacos', '172.29.0.1', 'common', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` VALUES (436, 'sys-config-redis.yml', 'DEFAULT_GROUP', 'redis:\n  service:\n    ipAddress: 127.0.0.1\n\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n\nspring:\n  redis:\n    # redis 配置文件，根据情况选择集群或者单机模式\n    # redis 集群环境配置\n    # redis cluster\n    # cluster:\n    #   nodes: 127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n    #   commandTimeout: 5000\n    \n    # redis 单点环境配置\n    # redis主机地址\n    host: ${redis.service.ipAddress}\n    # redis主机端口\n    port: 6379\n    # redis链接密码\n    password: \n    timeout: 10000ms\n\n    # Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n    lettuce:\n      pool:\n        # 连接池最大连接数（使用负值表示没有限制）\n        max-active: 30\n        # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1\n        # 连接池中的最大空闲连接\n        max-idle: 8\n        # 连接池中的最小空闲连接\n        min-idle: 0\n      # 关闭超时时间\n      shutdown-timeout: 100\n\n    # mybatis缓存的数据库，默认：第15个\n    # cacheDatabase: 15\n    # mybatis缓存过期时间（单位：分钟），默认：30\n    # cacheExpire: 30\n\n  # redisson链接配置\n  redisson:\n    # 当前处理核数量 * 2\n    thread: 4\n    # 最小空闲连接数,默认值:10,最小保持连接数（长连接）\n    connectionMinimumIdleSize: 12\n    # 连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n    # 而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\n    idleConnectionTimeout: 10000\n    # 连接等待超时,单位：毫秒,默认10000\n    connectTimeout: 10000\n    # 命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\n    timeout: 3000\n    # 命令失败重试次数，默认值:3\n    retryAttempts: 2\n    # 命令重试发送时间间隔，单位：毫秒,默认值:1500\n    retryInterval: 1500\n    # 单个连接最大订阅数量，默认值：5\n    subscriptionsPerConnection: 5\n    # 客户端名称\n    # clientName:\n    # 发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n    # 长期保持一定数量的发布订阅连接是必须的\n    subscriptionConnectionMinimumIdleSize: 1\n    # 发布和订阅连接池大小，默认值：50\n    subscriptionConnectionPoolSize: 50\n    # 连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\n    connectionPoolSize: 64\n    # 数据库编号，默认值：0\n    database: 14\n    # DNS监测时间间隔，单位：毫秒，默认值：5000\n    dnsMonitoringInterval: 5000 ', '04bbb478beb7d659b59822a9b2d34655', '2025-03-25 17:20:13', '2025-03-25 17:22:14', 'nacos', '172.29.0.1', 'common', 'dev', '', '', '', 'yaml', '', '');

-- ----------------------------
-- Table structure for config_info_gray
-- ----------------------------
DROP TABLE IF EXISTS `config_info_gray`;
CREATE TABLE `config_info_gray`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'group_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'md5',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT 'src_user',
  `src_ip` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'src_ip',
  `gmt_create` datetime(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) COMMENT 'gmt_create',
  `gmt_modified` datetime(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3) COMMENT 'gmt_modified',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'app_name',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT 'tenant_id',
  `gray_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'gray_name',
  `gray_rule` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'gray_rule',
  `encrypted_data_key` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT 'encrypted_data_key',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfogray_datagrouptenantgray`(`data_id` ASC, `group_id` ASC, `tenant_id` ASC, `gray_name` ASC) USING BTREE,
  INDEX `idx_dataid_gmt_modified`(`data_id` ASC, `gmt_modified` ASC) USING BTREE,
  INDEX `idx_gmt_modified`(`gmt_modified` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = 'config_info_gray' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_info_gray
-- ----------------------------

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation`  (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'nid, 自增长标识',
  PRIMARY KEY (`nid`) USING BTREE,
  UNIQUE INDEX `uk_configtagrelation_configidtag`(`id` ASC, `tag_name` ASC, `tag_type` ASC) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_tag_relation' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_group_id`(`group_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '集群、各Group容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
INSERT INTO `group_capacity` VALUES (1, '', 0, 14, 0, 0, 0, 0, '2025-03-25 16:22:50', '2025-03-25 20:25:40');

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info`  (
  `id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
  `nid` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'nid, 自增标识',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'operation type',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT '密钥',
  `publish_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT 'formal' COMMENT 'publish type gray or formal',
  `gray_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'gray name',
  `ext_info` longtext CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'ext info',
  PRIMARY KEY (`nid`) USING BTREE,
  INDEX `idx_gmt_create`(`gmt_create` ASC) USING BTREE,
  INDEX `idx_gmt_modified`(`gmt_modified` ASC) USING BTREE,
  INDEX `idx_did`(`data_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 42 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '多租户改造' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
INSERT INTO `his_config_info` VALUES (341, 1, 'sys-config-redis.properties', 'DEFAULT_GROUP', '', 'redis.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=NULL\n#redis主机端口\nspring.redis.port=6379\n#redis链接密码\nspring.redis.password=\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认：第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '1ea45488b353c2a59117a54f5ebfcfb4', '2025-03-25 16:17:22', '2025-03-25 16:17:23', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (340, 2, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=NULL\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '7fa99d34c9aa84b8af1f936aacffa50b', '2025-03-25 16:17:48', '2025-03-25 16:17:48', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (358, 3, 'sys-config-db.yml', 'DEFAULT_GROUP', '', 'db.service.ipAddress: 127.0.0.1\n####################################################################################################\n############################################ 主从分离 sharding-jdbc hikari 数据源配置 ################\n####################################################################################################\nspring:\n  shardingsphere:\n    datasource:\n      names: master,slave1,slave2\n      master: # 主数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://NULL:36005/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: learn_shop\n        password: pass123\n      slave1: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://NULL:36006/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: learn_shop_r\n        password: pass123\n      slave2: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://NULL:36007/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: learn_shop_r\n        password: pass123\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: dataSource\n      master-data-source-name: master\n      slave-data-source-names: slave1,slave2\n    props:\n      sql: true # 显示SQL', '4c16d39d1ab0c75e6cdd209bfa89aade', '2025-03-25 16:20:08', '2025-03-25 16:20:08', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (378, 4, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: NULL\n    # mq服务器地址\n    host: NULL\n    # mq服务器端口\n    port: NULL\n    # mq用户名和密码\n    username: NULL\n    password: NULL\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n        durable: true\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', 'd03000de11d762feb091718e52e649a7', '2025-03-25 16:22:07', '2025-03-25 16:22:08', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (431, 5, 'sys-config-mq.properties-copy', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=NULL\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\n# 控制输入MQ的日志级别\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', '0c50685d49335e611cd4da292b23e14a', '2025-03-25 16:22:49', '2025-03-25 16:22:50', 'nacos', '172.29.0.1', 'D', 'dev', '', 'formal', '', '{\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (346, 6, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  jpa: #JPA配置\n    generate-ddl: false\n    show-sql: true\n    hibernate:\n      ddl-auto: none\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\nauth:\n  token:\n    alias: jwt\n    jwtFileName: jwt.jks\n    jwtPassword: 123456789\n  white-list:\n    - \"/rsa/publicKey\" # 获取公钥\n# 日志\nlogging:\n  level:\n    org:\n      springframework:\n        security: DEBUG\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'fd821963aba0caa1fe6c7d4fdafa4cf1', '2025-03-25 16:57:56', '2025-03-25 16:57:57', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (408, 7, 'cloud-config.yml', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice:\n  client:\n    ipAddress: 127.0.0.1\n####################################################################################################\n################################################## 注册配置中心 - nacose ###############################\n####################################################################################################\nconfig:\n  gateway: \n      static: \n        locations: file:///D:/GitHub/learn/learn-shop-ui-admin/dist # 移动 /usr/app/app  pc /usr/app/web\n####################################################################################################\n################################################## 日志 配置 #################################\n####################################################################################################\nlogging:\n  config: classpath:logback-logstash.xml  # 日志配置文件名称\n\n\n####################################################################################################\n################################################## swagger 配置 #################################\n####################################################################################################\nswagger: #接口注解文档\n  client: # 登陆客户端配置\n    client-id: swagger\n    client-secret: swagger\n    scope: swagger\n    access-token-uri: \"http://127.0.0.1:8771/public-auth/oauth/token\"', 'a8cd8d58b28ba5fcc25428f95386251d', '2025-03-25 17:03:04', '2025-03-25 17:03:05', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (326, 8, 'cloud-config.properties', 'DEFAULT_GROUP', '', '####################################################################################################\n################################################## 服务器地址 ########################################\n####################################################################################################\nservice.client.ipAddress=192.168.137.200\n####################################################################################################\n################################################## 注册中心 - nacose ###############################\n####################################################################################################\n# 命名空间\nconfig.register.namespace=NULL\n# 注册中心地址\nconfig.register.serverAddr=http://${spring.cloud.nacos.config.server-addr}\n####################################################################################################\n################################################## learn-cloud-gateway ################################\n####################################################################################################\n# 移动 /usr/app/app\n# pc /usr/app/web\nconfig.gateway.static.locations=file:/usr/local/app\n#config.zuul.static.locations=file:///D:/usr/app', '3d9bb935e667663b38f9c68f406790b7', '2025-03-25 17:04:10', '2025-03-25 17:04:10', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (328, 9, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=192.168.137.200\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=NULL\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 日志收集\nconfig.mq.exchange.logCollect=logCollectExchange\nconfig.mq.queue.logCollect=logCollectQueue\nconfig.mq.routeKey.logCollect=logCollectRouteKey\n\n# zuul 向 system 系统发出执行 sql 请求\nconfig.mq.exchange.executeSql=executeSqlExchange\nconfig.mq.queue.executeSql=executeSqlQueue\nconfig.mq.routeKey.executeSql=executeSqlRouteKey\n\n# job 发送自动任务执行请求\nconfig.mq.exchange.runJobTest=runJobExchange\n#测试用\nconfig.mq.queue.runJobTest=runJobTestQueue\nconfig.mq.routeKey.runJobTest=runJobTestRouteKey\n\n# 商品系统\nconfig.mq.exchange.product=productExchange\n# product 发送刷新es缓存请求\nconfig.mq.queue.refreshEs=refreshEsQueue\nconfig.mq.routeKey.refreshEs=refreshEsRouteKey\n\n# 秒杀订单交换机\nconfig.mq.exchange.secKillOrder=secKillOrderExchange\n# 秒杀订单交换机（死信）\nconfig.mq.exchange.secKillOrderDlx=secKillOrderExchangeDlx\n# 秒杀成功后发送订单到order\nconfig.mq.queue.secKillToCoreOrder=secKillToCoreOrderQueue\n# 秒杀成功后发送订单到order（死信）\nconfig.mq.queue.secKillToCoreOrderDlx=secKillToCoreOrderQueueDlx\n# 秒杀成功后发送订单到system\nconfig.mq.queue.secKillToAdminSystem=secKillToAdminSystemQueue\n\n# job 向 system 系统发出发送邮件请求\nconfig.mq.exchange.sendMail=sendMailExchange\n\nconfig.mq.queue.sendMail=sendmailQueue\nconfig.mq.routeKey.sendMail=sendmailRouteKey\n\nconfig.mq.queue.sendMailDlx=sendmailQueueDlx\nconfig.mq.routeKey.sendMailDlx=sendmailRouteKeyDlx\n\nconfig.mq.queue.sendMailTrt=sendmailQueueTrt\nconfig.mq.routeKey.sendMailTrt=sendmailRouteKeyTrt\n\n#测试用\nconfig.mq.ts.test=ts-test', '220e4c41dd02ab8a9952e5847def6c04', '2025-03-25 17:04:10', '2025-03-25 17:04:11', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (329, 10, 'sys-config-redis.properties', 'DEFAULT_GROUP', '', 'redis.service.ipAddress=192.168.137.200\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=NULL\n#redis主机端口\nspring.redis.port=6399\n#redis链接密码\nspring.redis.password=require@@pass##$$1234%%4321\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认为第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '3ca5a318f2f193f66c28ca694ccdf36e', '2025-03-25 17:04:10', '2025-03-25 17:04:11', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (330, 11, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'ad3888ea44321e88c174b065db79acd2', '2025-03-25 17:04:10', '2025-03-25 17:04:11', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (331, 12, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', '', 'feign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\nspring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}', '403d2d5f9ea604975c8324238e02cc00', '2025-03-25 17:04:11', '2025-03-25 17:04:11', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (332, 13, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）', '31d09982d330e60cdf865d412cb4910d', '2025-03-25 17:04:11', '2025-03-25 17:04:11', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (333, 14, 'learn-shop-core-product.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'bed8be2b94503bc01ecd2d5df9726396', '2025-03-25 17:04:11', '2025-03-25 17:04:12', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (334, 15, 'learn-shop-public-auth.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'ad3888ea44321e88c174b065db79acd2', '2025-03-25 17:04:11', '2025-03-25 17:04:12', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (335, 16, 'learn-shop-public-job.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8011\n\nspring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', '89119f7fcfcc76906e9e7f3f0b2254aa', '2025-03-25 17:04:12', '2025-03-25 17:04:12', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (336, 17, 'learn-shop-core-search.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'c8fd9ca899be1b32ed1dc6a561a4efcc', '2025-03-25 17:04:12', '2025-03-25 17:04:12', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (357, 18, 'sys-config-db.yml', 'DEFAULT_GROUP', '', 'db.service.ipAddress: 192.168.137.200\n####################################################################################################\n############################################ 主从分离 sharding-jdbc hikari 数据源配置 ################\n####################################################################################################\nspring:\n  shardingsphere:\n    datasource:\n      names: master,slave1,slave2\n      master: # 主数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://NULL:36005/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n        username: learn_shop\n        password: pass123\n      slave1: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://NULL:36006/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n        username: learn_shop_r\n        password: pass123\n      slave2: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://NULL:36007/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true\n        username: learn_shop_r\n        password: pass123\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: dataSource\n      master-data-source-name: master\n      slave-data-source-names: slave1,slave2\n    props:\n      sql: true # 显示SQL', 'bb9d41f9ba84fffcbff44ffdcf07eb72', '2025-03-25 17:04:12', '2025-03-25 17:04:12', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\"}');
INSERT INTO `his_config_info` VALUES (375, 19, 'learn-shop-core-promotion.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', '952487839f52bff6f62ba70f3d5bb986', '2025-03-25 17:04:12', '2025-03-25 17:04:13', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (377, 20, 'learn-shop-app.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n  rabbitmq:\n    host: NULL #rabbitMQ服务器地址\n    port: NULL  #rabbitMQ服务器端口\n    username: NULL\n    password: NULL\n    virtual-host: ${config.mq.virtual-host}\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器', 'c8fd9ca899be1b32ed1dc6a561a4efcc', '2025-03-25 17:04:12', '2025-03-25 17:04:13', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (379, 21, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\r\n  # mq 配置\r\n  rabbitmq:\r\n    # 中间件类型\r\n    type: rabbit\r\n    # mq服务器地址\r\n    host: 192.168.137.200\r\n    # mq服务器端口\r\n    port: 5672\r\n    # mq用户名和密码\r\n    username: admin\r\n    password: admin123\r\n    # 虚拟主机\r\n    virtual-host: /learn-default\r\n\r\nnotice:\r\n  # 钉钉配置\r\n  ding:\r\n    # 钉钉机器人\r\n    robot:\r\n      # webhook\r\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\r\n      # 加签\r\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\r\n  # rabbit mq 配置\r\n  mq:\r\n    # mq 的队列、路由、交换机配置\r\n    mq-collect:\r\n      # 日志收集\r\n      log-collect:\r\n        queue: logCollectQueue\r\n        exchange: logCollectExchange\r\n        exchange-type: direct\r\n        route-key: logCollectRouteKey\r\n      # 运行自动任务\r\n      run-job-test:\r\n        queue: runJobTestQueue\r\n        exchange: runJobTestExchange\r\n        exchange-type: direct\r\n        route-key: runJobTestRouteKey\r\n      # 执行sql 配置\r\n      execute-sql:\r\n        queue: executeSqlQueue\r\n        exchange: executeSqlExchange\r\n        route-key: executeSqlRouteKey\r\n      # 刷新 es 缓存 配置\r\n      refresh-es:\r\n        queue: refreshEsQueue\r\n        exchange: productExchange\r\n        route-key: refreshEsRouteKey\r\n      #  秒杀订单发送订单系统 配置\r\n      sec-kill-to-core-order:\r\n        exchange: secKillOrderExchange\r\n        exchange-type: fanout\r\n        queue: secKillToCoreOrderQueue\r\n        dlx-queue: secKillToCoreOrderQueueDlx\r\n        dlx-exchange: secKillOrderExchangeDlx\r\n        dlx-exchange-type: fanout\r\n      #  秒杀订单发送system系统 配置\r\n      sec-kill-to-admin-system:\r\n        exchange: secKillOrderExchange\r\n        exchange-type: fanout\r\n        queue: secKillToAdminSystemQueue\r\n      #  发送邮件 配置\r\n      send-mail:\r\n        queue: sendmailQueue\r\n        exchange: sendMailExchange\r\n        route-key: sendmailRouteKey\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'db97224b941b1ec1d075273b224edc77', '2025-03-25 17:04:13', '2025-03-25 17:04:13', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\"}');
INSERT INTO `his_config_info` VALUES (404, 22, 'learn-shop-core-seckill.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    nacos:\n      discovery:\n        username: nacos\n        password: nacos\n        namespace: NULL # 命名空间\n        server-addr: NULL # 配置注册中心\n\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', '5d148b7636bce1ebbbbc519cc85d0c27', '2025-03-25 17:04:13', '2025-03-25 17:04:13', 'nacos', '172.29.0.1', 'D', 'pro', '', 'formal', '', '{\"type\":\"yaml\"}');
INSERT INTO `his_config_info` VALUES (340, 23, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '1b50ed404a8ca1be9a56d8d759af20a6', '2025-03-25 17:05:42', '2025-03-25 17:05:43', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (340, 24, 'sys-config-mq.properties', 'DEFAULT_GROUP', '', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '1b50ed404a8ca1be9a56d8d759af20a6', '2025-03-25 17:06:04', '2025-03-25 17:06:05', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"config_tags\":\"公共\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (341, 25, 'sys-config-redis.properties', 'DEFAULT_GROUP', '', 'redis.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=${redis.service.ipAddress}\n#redis主机端口\nspring.redis.port=6379\n#redis链接密码\nspring.redis.password=\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认：第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '6b275219932c5d6f38038a546e0c1568', '2025-03-25 17:06:38', '2025-03-25 17:06:38', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (342, 26, 'learn-shop-admin-user.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n# 如果路由方式是serviceId的方式，那么ribbon的生效，如果是url的方式，则zuul.host开头的生效\nribbon:\n  ReadTimeout: 15000\n  ConnectTimeout: 10000\n\n# 显示 sql 的查询参数\nlogging:\n  level:\n    org:\n      hibernate:\n        type:\n          descriptor:\n            sql:\n              BasicBinder: TRACE\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n', '2db4f098505d267566d342aedb6859c1', '2025-03-25 17:07:13', '2025-03-25 17:07:14', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (343, 27, 'learn-shop-admin-system.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    bus:\n      trace:\n        enabled: true #开启消息跟踪\n  activiti:\n    check-process-definitions: false #校验流程文件，默认校验resources下的processes文件夹里的流程文件\n    mail-server-use-ssl: true\n    database-schema-update: false #首次启动时，需要设置为true，自动建表\n    async-executor-activate: false\n  thymeleaf:\n    mode: HTML5\n    cache: false\n    prefix: classpath:/templates/\n  freemarker:\n    cache: false\n    template-loader-path: classpath:/templates/\n\n\ncustom:\n  menu:\n    write-cache: true #菜单写入缓存中\n  common:\n    base-file-path: D:/uploadfile # base 路径\n    image-mapping: /displayImag # 映射处理的路径，当 url 中有 /displayImag 时，资源映射到 D:/temp-rainy/\n    markdown-img-path: /markdown # 图片保存的路径\n    user-icon-img-path: /usericon # 图片保存的路径\n    start-init-data: false #启动时，是否初始数据（首次启动时需要设置为true,默认为true）\n  mail:\n    from: NULL #系统对外发送邮件的地址\n    host: smtp.exmail.qq.com\n    port: 465\n    username: XXXXXX\n    password: XXXXXX\n  thread-pool:\n    core-pool-size: 8 # 线程池长期维持的线程数 默认 8\n    maximum-pool-size: 10 # 线程数的上限 默认 10\n    capacity: 512 # 任务的排队队列 默认 512\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  mapper-locations: classpath*:mapper/**/*Mapper.xml', 'a3841a5e5cdac7454e2d8af1e0430216', '2025-03-25 17:07:29', '2025-03-25 17:07:30', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (344, 28, 'learn-shop-core-order.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    loadbalancer:\n      retry:\n        enabled: true #开启重试机制\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 1\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\nhystrix:\n  command:\n    default:\n      execution:\n        timeout:\n          enabled: true #Hystrix 是否启用超时时间\n        isolation:\n          thread:\n            timeoutInMilliseconds: 8000 #Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试\n          strategy: SEMAPHORE\n\nribbon:\n  ConnectTimeout: 1000 #ribbon请求连接的超时时间\n  ReadTimeout: 3000 #请求处理的超时时间\n  OkToRetryOnAllOperations: true #对所有请求操作都进行重试\n  MaxAutoRetries: 0 #对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）\n  MaxAutoRetriesNextServer: 5 #切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）\n\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'ea5aabc3b5e3adf8e60fef16d7639af9', '2025-03-25 17:07:45', '2025-03-25 17:07:46', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (345, 29, 'learn-shop-core-product.yml', 'DEFAULT_GROUP', '', 'feign:\n  hystrix:\n    enabled: true\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000\n\n###### 支付宝配置 #####\nalipay:\n  scan:\n    appId: 2016082500310007\n    privateKey: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDNNgoEcF2hTNWhaeOIMgSNf2OAyrOzmZo+/gKZelXaHsVkHgHg2PwJXXNlOkp5blERVxyxiwdzsRvdnC3Ul6UVbZHm+o2EPowYwZQ5CMiKnPBZ1n0fBi9v/XFmDXurz8OE+63rtfpl4ibKlTaJPh7gMX/krJ8JnSRzHxtVxhl6PI2S5wshWilWykOVmWKkayyu+0ulsOXw4GQHxxGiH0Q5k3g6m4MsDLRS+Pj7o9k0c0dCAr+riJcgxpBKZozAsezY6yhX8/eT0Q6oSFXblMuHg/GNwPAshR7RSWYp4XJWQSfN7Qvbz2d5giqpO/FXRiGz2yKPFIEaf01eGzzGXbxrAgMBAAECggEAXHsREqUNHSdCU4cj+noIITiawC0ZxUPhBqh0xXQjgrRBYvg/AnTnSNUrryAQ9h6oPDdVABJW3mWf2ESNRvS8eiayDTU3V7TUcEe1I+r4bbeCfgoywyuHb2H5m/NRm8F7LNA7tjGB0i6UKtIKDNnJEmJcb9L3rV57UcJgEEzBqJsYVqJGAH+51tELa+Nvoc/hjdAmdc/JQBPjKRSUMRbre7Hi2upA6eQf40JqZ7MewKumwAowkUPJAt1IXT9lZfinbOE6nGQLS4rfSQDtLpv34Ogkh1Q3p65wtIp8fNtj0BGWqKtS6ioK94HlAfapFmVIePpPzWxA3u3nNzU+7e7HkQKBgQD2TeBnYtvBA/3PJsJVKJRKd77ArSpBpIdvMmt5uNCdglVtxzBpXCQCTVbHhwD1k5geHqXxv941+JgZowALG+Ght/41ISNfBR23Wp5jQsF9rh/O3Zf6TP5YuCZkaaagKTDBvE25sQMvacfU2t4pwYFVFDgCl0QTxrzNAnXnn92IOQKBgQDVSgxCaqvFb4Y8YTCPL07XWWGNLm/RugtjIUWII5ivhE7O2oT+IFYIDdkQAYrQqk8dAYznncZSXUBMsp5UUTsRNN93sbv1/W3CJG4LLrtOxxfvIygGQ73K/KcwUcLfLqfKcnDFPC966062eCbaIiW2vES35/ga7ASrUp5n7EzBwwKBgFC+9RtPqHVdhp6buUfLttm26f0mh9zfQFsu71cHRLTuXm1PyMoxn8h1bEabNrBLg6oUKBjZ6tJMvihhbIk3yb+HnznxtDPZbIWImrY101MNe3YI5WL0TMnvDP8MN8j31/kbb2u54S5xAkcAvaZ4vpqSt036IyJMm+alsNuPaEPZAoGBAJPpwzC4GyFToyryV6Oksi9j2+P1xTQTqlv3semkjfmCbsjDACHgOOli+RpBh4wH38+EyLvDTcrGwpWt9WER6D2ZhjPSvT/tnZVagDofEWSja3S608Hsbo17w1IeEV+HUnNyA8S0ZVUAJFkkYAU8Ux0z2RAUvZml/eL168a0N9LTAoGBANpzvszR7wmQlDSDJaQgIU3jtSyxekf36uLpObdILnoDIQa9S17obIKFULqF/e16h/VmEZPJEBlWVGXzeTyXGOgF4VvqUJhKvGk3nPald48HK/OyKaH1VTdwKpk9VpNE3tHvnKAQVyOCEs5wvTYGZV8t98aS5pAk+0oPjLugCzJn\n    aliPayPublicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7zmfFuPvlQm5+/xv0uNi46yAk3V/lwABSunI0NB5GFukfVIe1OoQw4Puv4NRfHO3gqCKcN0g+gt2vTaAm8JJN9dy4HKNlB6SuOGGPtblQdsmvrY64moOwY2tZL7LAm4eiRfo4eWSczA41pjS7iCtzxyUkJ9H/1/5mmvsrCQ9jhYnQ/Si7iuTniLzIejFUnM1vWQXHtT4qmQjjotXF+OSvoohBxW2s0DY6rWl62qoEB0xJkg4KGofjuNhEuAlFDgWDOfYKNXCXKeXVuEvzamKGsQmFFxSNQvu6AGn3qvPogsPdWxesLmh48Ayei9BRL8d4RNcjOzXOMLv59YKX1LErQIDAQAB\n    notifyUrl: http://1p7v403130.iask.in/notify\n    returnUrl: http://1p7v403130.iask.in/return\n    gatewayUrl: https://openapi.alipaydev.com/gateway.do # 沙箱\n#    gatewayUrl: https://openapi.alipay.com/gateway.do # 生产\n#    charset: UTF-8 #编码格式,默认：UTF-8\n#    signType: RSA2 #商户生成签名字符串所使用的签名算法类型,默认：RSA2\nmybatis-plus:\n  configuration:\n    cache-enabled: false\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl', 'f1dad8c59ed450feb498797a6dac6027', '2025-03-25 17:08:01', '2025-03-25 17:08:02', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (348, 30, 'learn-shop-core-search.yml', 'DEFAULT_GROUP', '', 'spring:\n  elasticsearch:\n    rest:\n      connection-timeout: 10s\n      uris:\n        - http://127.0.0.1:9200\nfeign:\n  hystrix:\n    enabled: true\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', '0deb3968ed79bccc647c18628f549758', '2025-03-25 17:08:18', '2025-03-25 17:08:19', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (358, 31, 'sys-config-db.yml', 'DEFAULT_GROUP', '', 'db.service.ipAddress: 127.0.0.1\n####################################################################################################\n############################################ 主从分离 sharding-jdbc hikari 数据源配置 ################\n####################################################################################################\nspring:\n  shardingsphere:\n    datasource:\n      names: master,slave1,slave2\n      master: # 主数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:3306/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: root\n        password: root\n      slave1: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:3306/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: root\n        password: root\n      slave2: # 从数据源\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class: com.mysql.cj.jdbc.Driver\n        jdbc-url: jdbc:mysql://${db.service.ipAddress}:3306/learn?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai\n        username: root\n        password: root\n    masterslave:\n      load-balance-algorithm-type: round_robin\n      name: dataSource\n      master-data-source-name: master\n      slave-data-source-names: slave1,slave2\n    props:\n      sql: true # 显示SQL', 'fbd8b65f9f51f820183a0739b257e1c4', '2025-03-25 17:08:32', '2025-03-25 17:08:32', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (378, 32, 'sys-config-notice.yml', 'DEFAULT_GROUP', '', 'spring:\n  # mq 配置\n  rabbitmq:\n    # 中间件类型\n    type: ${config.mq.type}\n    # mq服务器地址\n    host: ${config.mq.host}\n    # mq服务器端口\n    port: ${config.mq.port}\n    # mq用户名和密码\n    username: ${config.mq.username}\n    password: ${config.mq.password}\n    # 虚拟主机\n    virtual-host: ${config.mq.virtual-host}\n\nnotice:\n  # 钉钉配置\n  ding:\n    # 钉钉机器人\n    robot:\n      # webhook\n      webhook: https://oapi.dingtalk.com/robot/send?access_token=d1e4bf1cb3b57616d92c86ef1e9783064cde5e8e6c28944801e719fa3588bf95\n      # 加签\n      robot-key: SECb2310283956906fe7acf381ff4fce58efc12f607579160361d274f15bbf8d29f\n  # rabbit mq 配置\n  mq:\n    # mq 的队列、路由、交换机配置\n    mq-collect:\n      # 日志收集\n      log-collect:\n        queue: logCollectQueue\n        exchange: logCollectExchange\n        exchange-type: topic\n        route-key: logCollectRouteKey\n        durable: true\n      # 运行自动任务\n      run-job-test:\n        queue: runJobTestQueue\n        exchange: runJobTestExchange\n        exchange-type: direct\n        route-key: runJobTestRouteKey\n      # 执行sql 配置\n      execute-sql:\n        queue: executeSqlQueue\n        exchange: executeSqlExchange\n        route-key: executeSqlRouteKey\n      # 刷新 es 缓存 配置\n      refresh-es:\n        queue: refreshEsQueue\n        exchange: productExchange\n        route-key: refreshEsRouteKey\n      #  秒杀订单发送订单系统 配置\n      sec-kill-to-core-order:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToCoreOrderQueue\n        dlx-queue: secKillToCoreOrderQueueDlx\n        dlx-exchange: secKillOrderExchangeDlx\n        dlx-exchange-type: fanout\n      #  秒杀订单发送system系统 配置\n      sec-kill-to-admin-system:\n        exchange: secKillOrderExchange\n        exchange-type: fanout\n        queue: secKillToAdminSystemQueue\n      #  发送邮件 配置\n      send-mail:\n        queue: sendmailQueue\n        exchange: sendMailExchange\n        route-key: sendmailRouteKey\n\n\n\n\n\n\n\n\n\n\n', '80c66926699d6a826df9aaab1dd32aa0', '2025-03-25 17:08:42', '2025-03-25 17:08:43', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (403, 33, 'learn-shop-core-promotion.yml', 'DEFAULT_GROUP', '', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n\nseckill:\n  gen-salt: wq<<.((0kkoe$$% # 设置盐值字符串，随便定义，用于混淆MD5值\n  load-data-start-before: 10 # 自动任务加载秒杀开始前多少分钟的数据加到缓存中（单位：分钟）\n  clear-data-end-arfer: 30 # 设置 redis 中秒杀活动结束后多少分钟数据过期（单位：分钟）\n  order-exp: 30 # 订单过期时间（单位：分钟）', 'fccdb730be16b02408a7aae563dbdc36', '2025-03-25 17:09:00', '2025-03-25 17:09:00', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (405, 34, 'learn-shop-app.yml', 'DEFAULT_GROUP', '', 'spring:\n  rabbitmq:\n    # 配置消息重试\n    listener:\n      simple:\n        acknowledge-mode: auto  # 自动ack\n        retry:\n          enabled: true\n          max-attempts: 5\n          initial-interval: 1000  # 重试初始间隔时间\n          multiplier: 2 # 间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间\n          max-interval: 10000   # 重试最大间隔时间\n\nfeign: #远程连接\n  hystrix: #熔断器配置\n    enabled: true #启动熔断器\n  client:\n    config:\n      default:\n        read-timeout: 30000\n        connect-timeout: 5000\nhystrix:\n  command:\n    default:\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 60000', 'd87d953c8ebfd5aac7a17b9788d22866', '2025-03-25 17:09:22', '2025-03-25 17:09:22', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"yaml\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (434, 35, 'seata-server.properties', 'DEFAULT_GROUP', '', 'store.mode=db\n#-----db-----\nstore.db.datasource=druid\nstore.db.dbType=mysql\n# 需要根据mysql的版本调整driverClassName\n# mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver\n# mysql8以下版本的driver：com.mysql.jdbc.Driver\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://mysql-alone:3306/seata-server?useUnicode=true&characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false\nstore.db.user=root\nstore.db.password=root\n# 数据库初始连接数\nstore.db.minConn=1\n# 数据库最大连接数\nstore.db.maxConn=20\n# 获取连接时最大等待时间 默认5000，单位毫秒\nstore.db.maxWait=5000\n# 全局事务表名 默认global_table\nstore.db.globalTable=global_table\n# 分支事务表名 默认branch_table\nstore.db.branchTable=branch_table\n# 全局锁表名 默认lock_table\nstore.db.lockTable=lock_table\n# 查询全局事务一次的最大条数 默认100\nstore.db.queryLimit=100\n\n\n# undo保留天数 默认7天,log_status=1（附录3）和未正常清理的undo\nserver.undo.logSaveDays=7\n# undo清理线程间隔时间 默认86400000，单位毫秒\nserver.undo.logDeletePeriod=86400000\n# 二阶段提交重试超时时长 单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试\n# 公式: timeout>=now-globalTransactionBeginTime,true表示超时则不再重试\n# 注: 达到超时时间后将不会做任何重试,有数据不一致风险,除非业务自行可校准数据,否者慎用\nserver.maxCommitRetryTimeout=-1\n# 二阶段回滚重试超时时长\nserver.maxRollbackRetryTimeout=-1\n# 二阶段提交未完成状态全局事务重试提交线程间隔时间 默认1000，单位毫秒\nserver.recovery.committingRetryPeriod=1000\n# 二阶段异步提交状态重试提交线程间隔时间 默认1000，单位毫秒\nserver.recovery.asynCommittingRetryPeriod=1000\n# 二阶段回滚状态重试回滚线程间隔时间  默认1000，单位毫秒\nserver.recovery.rollbackingRetryPeriod=1000\n# 超时状态检测重试线程间隔时间 默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器\nserver.recovery.timeoutRetryPeriod=1000', '5fe420ac6f7f61e47af572f850df0ca2', '2025-03-25 17:09:42', '2025-03-25 17:09:43', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"c_desc\":\"\\t\\nseata 分布式事务\"}');
INSERT INTO `his_config_info` VALUES (0, 36, 'sys-config-mq.yml', 'DEFAULT_GROUP', 'common', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '1b50ed404a8ca1be9a56d8d759af20a6', '2025-03-25 17:18:36', '2025-03-25 17:18:36', 'nacos', '172.29.0.1', 'I', 'dev', '', 'formal', '', '{\"src_user\":\"nacos\",\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (435, 37, 'sys-config-mq.yml', 'DEFAULT_GROUP', 'common', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '1b50ed404a8ca1be9a56d8d759af20a6', '2025-03-25 17:19:43', '2025-03-25 17:19:43', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (0, 38, 'sys-config-redis.yml', 'DEFAULT_GROUP', 'common', 'redis.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=${redis.service.ipAddress}\n#redis主机端口\nspring.redis.port=6379\n#redis链接密码\nspring.redis.password=\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认：第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '6b275219932c5d6f38038a546e0c1568', '2025-03-25 17:20:12', '2025-03-25 17:20:13', 'nacos', '172.29.0.1', 'I', 'dev', '', 'formal', '', '{\"src_user\":\"nacos\",\"type\":\"properties\"}');
INSERT INTO `his_config_info` VALUES (436, 39, 'sys-config-redis.yml', 'DEFAULT_GROUP', 'common', 'redis.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=${redis.service.ipAddress}\n#redis主机端口\nspring.redis.port=6379\n#redis链接密码\nspring.redis.password=\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认：第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '6b275219932c5d6f38038a546e0c1568', '2025-03-25 17:22:14', '2025-03-25 17:22:14', 'nacos', '172.29.0.1', 'U', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (340, 40, 'sys-config-mq.properties', 'DEFAULT_GROUP', 'common', 'mq.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## mq配置 ###########################################\n####################################################################################################\n#mq的类型\nconfig.mq.type=rabbit\n#mq服务器地址\nconfig.mq.host=${mq.service.ipAddress}\n#mq用户名和密码\nconfig.mq.username=admin\nconfig.mq.password=admin123\n#mq服务器端口\nconfig.mq.port=5672\n#虚拟主机\nconfig.mq.virtual-host=/learn-default\n\n# 控制输入MQ的日志级别\n#      DEBUG：输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。\n#      INFO： 输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。\n#      WARN： 输出警告信息；表明会出现潜在错误的情形。\n#      ERROR：输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。\n#      FATAL： 输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。\n#      ALL level：打开所有日志记录开关；是最低等级的，用于打开所有日志记录。\n#      OFF level：关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录\nconfig.mq.logCollect.log-level=OFF level\n\n# canal 同步 数据库到 es 的队列\nconfig.mq.queue.syncEs=canal-queue\n', '1b50ed404a8ca1be9a56d8d759af20a6', '2025-03-25 20:25:40', '2025-03-25 20:25:40', 'nacos', '172.29.0.1', 'D', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"config_tags\":\"公共\",\"src_user\":\"nacos\"}');
INSERT INTO `his_config_info` VALUES (341, 41, 'sys-config-redis.properties', 'DEFAULT_GROUP', 'common', 'redis.service.ipAddress=127.0.0.1\n####################################################################################################\n################################################## redis配置 ###########################################\n####################################################################################################\n#redis 配置文件，根据情况选择集群或者单机模式\n##redis 集群环境配置\n##redis cluster\n#spring.redis.cluster.nodes=127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003\n#spring.redis.cluster.commandTimeout=5000\n##redis 单点环境配置\n#redis\n#redis主机地址\nspring.redis.host=${redis.service.ipAddress}\n#redis主机端口\nspring.redis.port=6379\n#redis链接密码\nspring.redis.password=\nspring.redis.timeout=10000ms\n\n#Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-active=30\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.lettuce.pool.min-idle=0\n# 关闭超时时间\nspring.redis.lettuce.shutdown-timeout=100\n#mybatis缓存的数据库，默认：第15个\n#spring.redis.cacheDatabase=15\n#mybatis缓存过期时间（单位：分钟），默认：30\n#spring.redis.cacheExpire=30\n\n# redisson链接配置\n#当前处理核数量 * 2\nspring.redisson.thread=4\n#最小空闲连接数,默认值:10,最小保持连接数（长连接）\nspring.redisson.connectionMinimumIdleSize=12\n#连接空闲超时，单位：毫秒 默认10000;当前连接池里的连接数量超过了最小空闲连接数，\n#而连接空闲时间超过了该数值，这些连接将会自动被关闭，并从连接池里去掉\nspring.redisson.idleConnectionTimeout=10000\n#连接等待超时,单位：毫秒,默认10000\nspring.redisson.connectTimeout=10000\n#命令等待超时,单位：毫秒,默认3000；等待节点回复命令的时间。该时间从命令发送成功时开始计时\nspring.redisson.timeout=3000\n#命令失败重试次数，默认值:3\nspring.redisson.retryAttempts=2\n#命令重试发送时间间隔，单位：毫秒,默认值:1500\nspring.redisson.retryInterval=1500\n#单个连接最大订阅数量，默认值：5\nspring.redisson.subscriptionsPerConnection=5\n#客户端名称\n#spring.redisson.clientName=\n#发布和订阅连接的最小空闲连接数，默认值：1；Redisson内部经常通过发布和订阅来实现许多功能。\n#长期保持一定数量的发布订阅连接是必须的\nspring.redisson.subscriptionConnectionMinimumIdleSize=1\n#发布和订阅连接池大小，默认值：50\nspring.redisson.subscriptionConnectionPoolSize=50\n#连接池最大容量。默认值：64；连接池的连接数量自动弹性伸缩\nspring.redisson.connectionPoolSize=64\n#数据库编号，默认值：0\nspring.redisson.database=14\n#DNS监测时间间隔，单位：毫秒，默认值：5000\nspring.redisson.dnsMonitoringInterval=5000 ', '6b275219932c5d6f38038a546e0c1568', '2025-03-25 20:25:40', '2025-03-25 20:25:40', 'nacos', '172.29.0.1', 'D', 'dev', '', 'formal', '', '{\"type\":\"properties\",\"src_user\":\"nacos\"}');

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions`  (
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'role',
  `resource` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'resource',
  `action` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'action',
  UNIQUE INDEX `uk_role_permission`(`role` ASC, `resource` ASC, `action` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of permissions
-- ----------------------------

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'username',
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'role',
  UNIQUE INDEX `idx_user_role`(`username` ASC, `role` ASC) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of roles
-- ----------------------------
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_id`(`tenant_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '租户容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
INSERT INTO `tenant_capacity` VALUES (1, 'dev', 0, 14, 0, 0, 0, 0, '2025-03-25 16:22:50', '2025-03-25 20:25:40');
INSERT INTO `tenant_capacity` VALUES (2, 'pro', 0, 0, 0, 0, 0, 0, '2025-03-25 17:04:10', '2025-03-25 20:20:36');

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_info_kptenantid`(`kp` ASC, `tenant_id` ASC) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'tenant_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
INSERT INTO `tenant_info` VALUES (3, '1', 'seata-dev', 'seata-dev', 'seata 分布式事务-开发环境', 'nacos', 1614732471148, 1614732471148);
INSERT INTO `tenant_info` VALUES (4, '1', 'pro', 'pro', '生产', 'nacos', 1615533858715, 1615533993047);
INSERT INTO `tenant_info` VALUES (5, '1', 'dev', 'dev', '开发', 'nacos', 1615533876724, 1615533986301);

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'username',
  `password` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'password',
  `enabled` tinyint(1) NOT NULL COMMENT 'enabled',
  PRIMARY KEY (`username`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('nacos', '$2a$10$SYaXfRAa7Slm0LbUXaHsoOkokJH9/WmVgMwWoIxgRIBjiSfu0sERm', 1);

SET FOREIGN_KEY_CHECKS = 1;
